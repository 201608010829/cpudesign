library iEEE ;
use IEEe.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity pc is
	port(
		clk:in std_logic ;
		rst:in std_logic ;
		pause:in std_logic ;
		imm:in std_logic_vector(31 downto 0) ;
		pc_src:in std_logic ;
		
		pc_out:out std_logic_vector(31 downto 0) 
	);
end pc;

architecture pc_bhv of pc is
	
	signal pc_now: std_logic_vector(31 downto 0) :=X"00000000";
	signal pc_next:std_logic_vector(31 downto 0) ;
	
begin
	--pc_next <= std_logic_vector( unsigned(pc_now) + 4) when pc_src='0' else
	--		   std_logic_vector( unsigned(pc_now) + unsigned(imm) ) ;
			   
	seq0: process(clk)
	begin
		if rising_edge(clk) and pause='0'  then
			if rst='1' then
				pc_next <= X"00000000";
			elsif pc_src='0' then
				pc_next <= std_logic_vector( unsigned(pc_now) + 4);
			elsif pc_src='1' then
				pc_next <= std_logic_vector( unsigned(pc_now) + unsigned(imm));
			end if;
			pc_now <= pc_next; 
			pc_out<=pc_now;
		end if;
	
	end process;

end pc_bhv;
--entity sw_pc_ar is
--port(
--    en:in std_logic;
--    Clk_cdu,pcclr,pcld,pcen:in STD_LOGIC ;
--    sw_bus,pc_bus,ldar:in STD_LOGIC;
--    inputd:in STD_LOGIC_VECTOR( 7 downto 0 );
--    arout: out sTD_LOGIC_VECTOR( 7 downto 0 );
--    d     : inout sTD_LOGIC_VECTOR( 7 downto 0 ));
--end sw_pc_ar;
--
--architecture rtl of sw_pc_ar is
--signal pc,ar,bus_Reg :STD_LOGIC_VECTOR( 7 downto 0 );
--begin
--seq1:process(Clk_cdu,ldar,bus_Reg)
--    begin
--        if Clk_cdu'event and Clk_cdu ='1' then
--            if ldar='1' then
--                ar <= bus_Reg;
--            end if;
--        end if;
--    end process ;
--seq2:process(Clk_cdu,pcclr,pcld,pcen,bus_Reg,en)
--begin
--    if pcclr='0' then
--         pc<= (others=>'0');
--    elsif Clk_cdu'event and Clk_cdu ='1' then
--        if(pcld='0'and pcen='1') then
--             pc<=bus_Reg;
--        elsif (pcld='1' and pcen='1'and en='0') then
--            pc<=pc+1;
--        end if;
--    end if;
-- end process;
-- 
-- bus_Reg<= inputd when (sw_bus='0' and pc_bus='1') else
--           pc    when (sw_bus='1' and pc_bus='0') else 
--           d;
-- d<=bus_Reg when (sw_bus='0'or pc_bus='0') else 
--     (others=>'Z');
-- arout<=ar;
-- end rtl;
  