$date
  Thu Sep 12 10:53:26 2019
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module opcodes $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module multiplexer_inp_type $end
$upscope $end
$scope module core_testbench $end
$var reg 1 ! clk $end
$var reg 1 " reset_pc $end
$scope module c_core $end
$var reg 1 # clk $end
$var reg 1 $ reset_pc $end
$comment alu_op is not handled $end
$var reg 1 % alu_br_flag $end
$var reg 2 & alu_mem_pc_sel[1:0] $end
$var reg 32 ' alu_mem_pc_res[31:0] $end
$var reg 32 ( alu_res[31:0] $end
$var reg 32 ) mem_res[31:0] $end
$var reg 32 * pc_val_next[31:0] $end
$var reg 1 + imm_rs2_sel[0:0] $end
$var reg 32 , rs2_imm_res[31:0] $end
$var reg 32 - ir_imm[31:0] $end
$var reg 5 . rs1[4:0] $end
$var reg 5 / rs2[4:0] $end
$var reg 32 0 rs1_data[31:0] $end
$var reg 32 1 rs2_data[31:0] $end
$var reg 5 2 rd[4:0] $end
$var reg 32 3 pc_off[31:0] $end
$var reg 2 4 pc_mode[1:0] $end
$var reg 1 5 en_write_reg $end
$var reg 1 6 en_write_ram $end
$var reg 32 7 ir[31:0] $end
$var reg 1 8 pc_alu_sel[0:0] $end
$var reg 32 9 pc_alu_res[31:0] $end
$var reg 32 : pc_val[31:0] $end
$var reg 2 ; ld_sz[1:0] $end
$var reg 1 < ld_sign_ex $end
$var reg 2 = st_sz[1:0] $end
$scope module mux_pc_alu $end
$var reg 1 > selector[0:0] $end
$comment x is not handled $end
$var reg 32 ? y[31:0] $end
$upscope $end
$scope module mux_alu_mem_pc $end
$var reg 2 @ selector[1:0] $end
$comment x is not handled $end
$var reg 32 A y[31:0] $end
$upscope $end
$scope module mux_rs2_imm $end
$var reg 1 B selector[0:0] $end
$comment x is not handled $end
$var reg 32 C y[31:0] $end
$upscope $end
$scope module c_alu $end
$var reg 32 D i_data1[31:0] $end
$var reg 32 E i_data2[31:0] $end
$comment i_op is not handled $end
$var reg 32 F q_res[31:0] $end
$var reg 1 G q_br $end
$var reg 1 H br $end
$upscope $end
$scope module c_mem $end
$var reg 1 I clk $end
$var reg 32 J i_addr[31:0] $end
$var reg 2 K i_ld_sz[1:0] $end
$var reg 1 L i_sign_ex $end
$var reg 32 M i_data[31:0] $end
$var reg 2 N i_st_sz[1:0] $end
$var reg 1 O en_write $end
$var reg 32 P q_data[31:0] $end
$var reg 32 Q q_ir[31:0] $end
$comment memdata is not handled $end
$upscope $end
$scope module c_pc $end
$var reg 1 R i_clk $end
$var reg 1 S i_reset $end
$var reg 2 T i_mode[1:0] $end
$var reg 32 U i_pc_off[31:0] $end
$var reg 32 V i_abs_addr[31:0] $end
$var reg 32 W q_val[31:0] $end
$var reg 32 X q_val_next[31:0] $end
$var reg 32 Y val[31:0] $end
$var reg 32 Z val_next[31:0] $end
$var reg 1 [ read_next $end
$var reg 1 \ read_next_next $end
$upscope $end
$scope module c_control_unit $end
$var reg 32 ] ir[31:0] $end
$var reg 32 ^ pc[31:0] $end
$var reg 1 _ br_flag $end
$var reg 2 ` res_sel[1:0] $end
$comment alu_op is not handled $end
$var reg 1 a pc_alu_sel[0:0] $end
$var reg 32 b pc_off[31:0] $end
$var reg 2 c pc_mode[1:0] $end
$var reg 5 d rs1[4:0] $end
$var reg 5 e rs2[4:0] $end
$var reg 1 f en_write_reg $end
$var reg 5 g rd[4:0] $end
$var reg 1 h en_imm[0:0] $end
$var reg 32 i imm[31:0] $end
$var reg 1 j en_write_ram $end
$var reg 1 k ld_sign_ex $end
$var reg 2 l ld_sz[1:0] $end
$var reg 2 m st_sz[1:0] $end
$var reg 7 n opc[6:0] $end
$var reg 3 o funct3[2:0] $end
$var reg 7 p funct7[6:0] $end
$upscope $end
$scope module c_reg_file $end
$var reg 1 q clk $end
$var reg 5 r rs1[4:0] $end
$var reg 5 s rs2[4:0] $end
$var reg 5 t rd[4:0] $end
$var reg 32 u i_data[31:0] $end
$var reg 1 v en_write $end
$var reg 32 w q_rs1[31:0] $end
$var reg 32 x q_rs2[31:0] $end
$comment reg_blocks is not handled $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
